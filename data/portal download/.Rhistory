# Replace 'path' with the location of the folder
path <- 'C:/Users/klevan/Documents/GitHub'
# paths
pathToData <- paste(path,'carabid-workshop/data/portal download',sep='/')
pathToWeatherData <- paste(path,'carabid-workshop/data',sep='/')
setwd(pathToData)
# Suffixes of the 3 data tables generated by NEON Carabid Sampling
# See the following link for details about the protocol: http://data.neoninc.org/documents?p_p_id=110_INSTANCE_JEygRkSpUBoq&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_count=1&_110_INSTANCE_JEygRkSpUBoq_struts_action=%2Fdocument_library_display%2Fview_file_entry&_110_INSTANCE_JEygRkSpUBoq_redirect=http%3A%2F%2Fdata.neoninc.org%2Fdocuments%2F-%2Fdocument_library_display%2FJEygRkSpUBoq%2Fview%2F1883155%3F_110_INSTANCE_JEygRkSpUBoq_redirect%3Dhttp%253A%252F%252Fdata.neoninc.org%252Fdocuments%253Fp_p_id%253D110_INSTANCE_JEygRkSpUBoq%2526p_p_lifecycle%253D0%2526p_p_state%253Dnormal%2526p_p_mode%253Dview%2526p_p_col_id%253Dcolumn-1%2526p_p_col_count%253D1&_110_INSTANCE_JEygRkSpUBoq_fileEntryId=1663903
field <- 'bet_fielddata.csv' # Data that is recorded in the field when samples are recovered from pitfall traps
sort <- 'bet_sorting.csv' # Data recorded in the lab during an initial sort; data on vertebrate and invertebrate bycatch is recorded in this table; data on carabids that were not pinned is recorded here
pin <- 'bet_IDandpinning.csv' # Data on identified carabids that were pinned; many of these Carabids will eventually be available for loan from archival facilities
weather <- 'NOAA weather data for 2014.csv'
# This function will grab the file paths of all the data in the folder
fileList <- list.files(pathToData, full.names=TRUE) # list all the files, full.names=TRUE is necessary for ldplay/lapply to work below
field <- fileList[grep(field,fileList)] # subset to just the ones in your module, using prefix, if needed
sort <- fileList[grep(sort,fileList)] # subset to just the ones in your module, using prefix, if needed
pin <- fileList[grep(pin,fileList)] # subset to just the ones in your module, using prefix, if needed
fileList <- list.files(pathToWeatherData, full.names=TRUE) # list all the files, full.names=TRUE is necessary for ldplay/lapply to work below
weather <- fileList[grep(weather,fileList)]
weather <- read.table(weather, header=TRUE, sep=",",stringsAsFactors = FALSE); weather[,c(8,12:14)] <- weather[,c(8,12:14)]/10;weather$DATE <- paste(substr(weather$DATE,1,4),substr(weather$DATE,5,6),substr(weather$DATE,7,8),sep = '-') ;weather$DATE <- as.Date(weather$DATE,format="%Y-%m-%d")
# Three dataframes compiling all the NEON data are created below
bet_field = multipleCombine(field, ply = ldply) # The field data from all sites
bet_sort = multipleCombine(sort, ply = ldply) # The sorting data from all sites
bet_pin = multipleCombine(pin, ply = ldply) # The data on pinned Carabidae
gisData <- unique.data.frame(bet_field[c("domainID","siteID","plotID","trapID","nlcdClass",
"decimalLatitude","decimalLongitude","geodeticDatum",
"coordinateUncertainty","elevation","elevationUncertainty")])
bet_field %>% filter(missingRecordsPerBoutQF==0) %>% select(-missingRecordsPerBoutQF)->bet_field # These are misleading. If FOPS didn't set a trap, it isn't in any table
rm(field,sort,pin,fileList)
###########################
#
###########
rm(list=ls())
options(stringsAsFactors = FALSE)
multipleCombine <- function(input, ply = llply){
require(plyr)
require(dplyr)
ply(input, function(x){
t <- read.table(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary variable
return(t1) # return the full variable
}
)
}
###########
# LIBRARIES
###########
library(plyr)
library(dplyr)
##############
# LOADING DATA
##############
# The data in this github repository was downloaded on 8/7/2015
# Replace 'path' with the location of the folder
path <- 'C:/Users/klevan/Documents/GitHub'
# paths
pathToData <- paste(path,'carabid-workshop/data/portal download',sep='/')
pathToWeatherData <- paste(path,'carabid-workshop/data',sep='/')
setwd(pathToData)
# Suffixes of the 3 data tables generated by NEON Carabid Sampling
# See the following link for details about the protocol: http://data.neoninc.org/documents?p_p_id=110_INSTANCE_JEygRkSpUBoq&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_count=1&_110_INSTANCE_JEygRkSpUBoq_struts_action=%2Fdocument_library_display%2Fview_file_entry&_110_INSTANCE_JEygRkSpUBoq_redirect=http%3A%2F%2Fdata.neoninc.org%2Fdocuments%2F-%2Fdocument_library_display%2FJEygRkSpUBoq%2Fview%2F1883155%3F_110_INSTANCE_JEygRkSpUBoq_redirect%3Dhttp%253A%252F%252Fdata.neoninc.org%252Fdocuments%253Fp_p_id%253D110_INSTANCE_JEygRkSpUBoq%2526p_p_lifecycle%253D0%2526p_p_state%253Dnormal%2526p_p_mode%253Dview%2526p_p_col_id%253Dcolumn-1%2526p_p_col_count%253D1&_110_INSTANCE_JEygRkSpUBoq_fileEntryId=1663903
field <- 'bet_fielddata.csv' # Data that is recorded in the field when samples are recovered from pitfall traps
sort <- 'bet_sorting.csv' # Data recorded in the lab during an initial sort; data on vertebrate and invertebrate bycatch is recorded in this table; data on carabids that were not pinned is recorded here
pin <- 'bet_IDandpinning.csv' # Data on identified carabids that were pinned; many of these Carabids will eventually be available for loan from archival facilities
weather <- 'NOAA weather data for 2014.csv'
# This function will grab the file paths of all the data in the folder
fileList <- list.files(pathToData, full.names=TRUE) # list all the files, full.names=TRUE is necessary for ldplay/lapply to work below
field <- fileList[grep(field,fileList)] # subset to just the ones in your module, using prefix, if needed
sort <- fileList[grep(sort,fileList)] # subset to just the ones in your module, using prefix, if needed
pin <- fileList[grep(pin,fileList)] # subset to just the ones in your module, using prefix, if needed
fileList <- list.files(pathToWeatherData, full.names=TRUE) # list all the files, full.names=TRUE is necessary for ldplay/lapply to work below
weather <- fileList[grep(weather,fileList)]
weather <- read.table(weather, header=TRUE, sep=",",stringsAsFactors = FALSE); weather[,c(8,12:14)] <- weather[,c(8,12:14)]/10;weather$DATE <- paste(substr(weather$DATE,1,4),substr(weather$DATE,5,6),substr(weather$DATE,7,8),sep = '-') ;weather$DATE <- as.Date(weather$DATE,format="%Y-%m-%d")
# Three dataframes compiling all the NEON data are created below
bet_field = multipleCombine(field, ply = ldply) # The field data from all sites
bet_sort = multipleCombine(sort, ply = ldply) # The sorting data from all sites
bet_pin = multipleCombine(pin, ply = ldply) # The data on pinned Carabidae
gisData <- unique.data.frame(bet_field[c("domainID","siteID","plotID","trapID","nlcdClass",
"decimalLatitude","decimalLongitude","geodeticDatum",
"coordinateUncertainty","elevation","elevationUncertainty")])
bet_field %>% filter(missingRecordsPerBoutQF==0) %>% select(-missingRecordsPerBoutQF)->bet_field # These are misleading. If FOPS didn't set a trap, it isn't in any table
rm(field,sort,pin,fileList)
###########################
# FIXING ERRORS IN THE DATA
#
