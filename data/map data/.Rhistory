aphsp <- c("Chaitophorous viminicola","Chaitophorous nigrae", "Pterocomma bicolor", "Pterocomma pilosum", "Aphis farinosa")
antsp <- c("Prenolepis imparis", "Crematogaster hespera", "Liometopum occidentale", "Formica francoueri",
"Tapinoma sessile", "Dorymyrmex insanus", "Forelius mccooki", "Formica moki", "Camponotus sp.","Linepithema humile")
species <- matrix(rep(0,length(aphsp)*length(antsp)),ncol = length(aphsp),nrow=length(antsp))
colnames(species) <- aphsp
rownames(species) <- antsp
# Fill the matrix with appropriate values
for (i in colnames(species)){
for (j in rownames(species)){
interactions %>%
filter(aphidID==i,antID==j) -> a
if (dim(a)[1]>0){
species[j,i] <- 1
}
}
}
View(species)
# Assymetry analysis
# Create observed AS matrix
# With Argentine ant
Bij <- species # Interaction strength of ant species on aphid species;  the proportion of interactions between ant j and aphid i of the total interactions recorded for aphid species i
Bji <- species # Interaction strength of aphid species on ant species;  the proportion of interactions between ant j and aphid i of the total interactions recorded for ant species j
AS <- species
for (i in colnames(species)){ # aphids are i
for (j in rownames(species)){ # ants are j
Bji[j,i] <- species[j,i]/sum(species[j,])
Bij[j,i] <- species[j,i]/sum(species[,i])
AS[j,i] <- abs(Bij[j,i]-Bji[j,i])/max(Bij[j,i],Bji[j,i])
}
}
for (i in 1:10000){
randBij <- sample(Bij,replace = FALSE)
randBij <- matrix(randBij,ncol = length(aphsp),nrow=length(antsp))
colnames(randBij) <- aphsp
rownames(randBij) <- antsp
for (k in 1:dim(species)[2]){
for (l in 1:dim(species)[1]){
maxMatrix[l,k] <- max(randBij[l,k],Bji[l,k])
}
}
expectedAS <- abs(randBij-Bji)/maxMatrix
nullDist <- append(nullDist,mean(expectedAS,na.rm = TRUE))
}
hist(nullDist)
mean(AS,na.rm = TRUE)
AS
Bij
randBij <- Bij
expectedAS <- species
maxMatrix <- species
nullDist <- vector()
for (i in 1:10000){
randBij <- sample(Bij,replace = FALSE)
randBij <- matrix(randBij,ncol = length(aphsp),nrow=length(antsp))
colnames(randBij) <- aphsp
rownames(randBij) <- antsp
for (k in 1:dim(species)[2]){
for (l in 1:dim(species)[1]){
maxMatrix[l,k] <- max(randBij[l,k],Bji[l,k])
}
}
expectedAS <- abs(randBij-Bji)/maxMatrix
nullDist <- append(nullDist,mean(expectedAS,na.rm = TRUE))
}
hist(nullDist)
all(nullDist,mean(AS,na.rm = TRUE))
rm(list = ls())
###########
# LIBRARIES
###########
library(plyr)
library(dplyr)
library(maps)
library(mapproj)
library(foreign)
library(maptools)
library(raster)
library(sp)
library(graphics)
library(vegan)
##############
# LOADING DATA
##############
# The data in this github repository was downloaded on 8/7/2015
# Replace 'pathToData' with the location of the carabid data downloaded from NEON's web portal
pathToData <- 'C:/Users/klevan/Documents/GitHub/entsoc-workshop/data/cleaned data'
setwd(pathToData)
bet_div <- read.csv(paste(pathToData,"carabidAbundanceData.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE)
bet_div1 <- read.csv(paste(pathToData,"carabidDiversityData.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE)
bet_field <- read.csv(paste(pathToData,"fieldData-cleaned.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE); bet_field$beetleAbundance <- as.numeric(bet_field$beetleAbundance); bet_field$beetleRichness <- as.numeric(bet_field$beetleRichness)
bet_sort <- read.csv(paste(pathToData,"sortData-cleaned.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE)
bet_pin <- read.csv(paste(pathToData,"pinData-cleaned.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE)
weather <- read.csv(paste(substr(pathToData,1,53),"NOAA weather data for 2014.csv",sep='/'),stringsAsFactors = FALSE,header = TRUE)
# Inputting NEON Domain info
setwd(paste(substr(pathToData,1,53),'map data',sep='/'))
Ddbf<-read.dbf("NEON_Domains.dbf")
Dmap<-readShapePoly("NEON_Domains.shp")
crs(Dmap) <- "+proj=utm +units=m +ellps=WGS84"
# GBIF carabid occurrences as of 10-12-2015
#car <- read.csv("~/GitHub/gbif-carabid/Beetles/Domain Info/carabids10-12-2015.csv",stringsAsFactors = FALSE)
#car$eventdate <- substr(car$eventdate,1,10);car$eventdate <- as.Date(car$eventdate,format = '%Y-%m-%d',origin = as.Date("1900-01-01"))
#for(i in 1:dim(car)[1]){
#  if(is.na(car$eventdate[i])==FALSE){
#    car$julian[i] <- as.numeric(julian(car$eventdate[i],origin = as.Date(paste(car$year[i],'01','01',sep='-')))[1])
#  }
#}
#car <- car[c('gbifid','genus','species','eventdate','year','decimallatitude','decimallongitude',
#            'countrycode','locality','identifiedby')]
#car %>% filter(nchar(genus)>0) -> car
#colnames(car)[6:7] <- c('Lat','Lon'); car -> bet_GBIF
#coordinates(bet_GBIF) <- c("Lon", "Lat")
#proj4string(bet_GBIF) <- proj4string(Dmap)
#############################
# Treating the data correctly
#############################
bet_div$collectDate <- as.Date(bet_div$collectDate,format = '%m/%d/%Y'); bet_div$etOHChangeDate <- as.Date(bet_div$etOHChangeDate,format = '%m/%d/%Y'); bet_div$processingDate <- as.Date(bet_div$processingDate,format = '%m/%d/%Y'); bet_div$identifiedDate <- as.Date(bet_div$identifiedDate,format = '%m/%d/%Y'); bet_div$individualCount<- as.numeric(bet_div$individualCount)
bet_div1$collectDate <- as.Date(bet_div1$collectDate,format = '%m/%d/%Y')
bet_field$collectDate <- as.Date(bet_field$collectDate,format = '%m/%d/%Y'); bet_field$setDate <- as.Date(bet_field$setDate,format = '%m/%d/%Y')
bet_sort$collectDate <- as.Date(bet_sort$collectDate,format = '%m/%d/%Y'); bet_sort$etOHChangeDate <- as.Date(bet_sort$etOHChangeDate,format = '%m/%d/%Y'); bet_sort$processingDate <- as.Date(bet_sort$processingDate,format = '%m/%d/%Y'); bet_sort$identifiedDate <- as.Date(bet_sort$identifiedDate,format = '%m/%d/%Y')
bet_pin$collectDate <- as.Date(bet_pin$collectDate,format = '%m/%d/%Y'); bet_pin$processingDate <- as.Date(bet_pin$processingDate,format = '%m/%d/%Y'); bet_pin$identifiedDate <- as.Date(bet_pin$identifiedDate,format = '%m/%d/%Y')
for (i in 1:dim(bet_div1)[1]){
bet_field %>%
filter(plotID==bet_div1$plotID[i],trapID==bet_div1$trapID[i],
is.na(decimalLatitude)!=TRUE) -> a
bet_div1$decimalLatitude[i] <- a$decimalLatitude[1]
bet_div1$decimalLongitude[i] <- a$decimalLongitude[1]
bet_div1$nlcdClass[i] <- a$nlcdClass[1]
rm(a)
}
##########################################
# Creating data frames at different levels
##########################################
# bet_field; calculated at the plot level
bet_field_plot <- unique.data.frame(bet_field[c("domainID","siteID","plotID","nlcdClass",
"setDate","collectDate",'eventID')])
for (i in unique(bet_field_plot$eventID)){
bet_field %>%
filter(eventID==i)->a
bet_div1 %>%
# select(-sampleID,-trapID) %>%
filter(plotID==substr(i,5,12),collectDate==bet_field_plot$collectDate[match(i,bet_field_plot$eventID)])-> div; div <- unique.data.frame(div[,c(1:3,5,7:10)])
div %>%
filter(nchar(taxonID)<14)-> div1
bet_field_plot$nlcdClass[match(i,bet_field_plot$eventID)] <- a$nlcdClass[1]
bet_field_plot$decimalLatitude[match(i,bet_field_plot$eventID)] <- mean(a$decimalLatitude,na.rm = TRUE)
bet_field_plot$decimalLongitude[match(i,bet_field_plot$eventID)]<- mean(a$decimalLongitude,na.rm = TRUE)
bet_field_plot$geodeticDatum[match(i,bet_field_plot$eventID)]<- a$geodeticDatum[1]
bet_field_plot$coordinateUncertainty[match(i,bet_field_plot$eventID)]<- a$coordinateUncertainty[1]
bet_field_plot$elevation[match(i,bet_field_plot$eventID)]<- mean(a$elevation,na.rm = TRUE)
bet_field_plot$elevationUncertainty[match(i,bet_field_plot$eventID)]<- a$elevationUncertainty[1]
bet_field_plot$beetleAbundance[match(i,bet_field_plot$eventID)]<-sum(a$beetleAbundance)
bet_field_plot$beetleRichness[match(i,bet_field_plot$eventID)] <- dim(div)[1]
bet_field_plot$beetleRichnessNoMorphospecies[match(i,bet_field_plot$eventID)] <- dim(div1)[1]
bet_field_plot$prcp[match(i,bet_field_plot$eventID)]<-mean(a$prcp)
rm(a,div,div1)
}
# bet_field calculated at the bout level
bet_field_bout <- unique.data.frame(bet_field[,c("domainID","siteID","collectDate")])
for (i in 1:dim(bet_field_bout)[1]){
bet_field %>%
filter(domainID==bet_field_bout$domainID[i],siteID==bet_field_bout$siteID[i],
collectDate==bet_field_bout$collectDate[i]) -> a
# Rainfall
bet_field_bout$prcp[i]<-mean(a$prcp)
# beetle Abundance
bet_field_bout$beetleAbundance[i] <- sum(a$beetleAbundance)
# beetle Richness
bet_div1 %>%
#    select(-sampleID,-trapID,-plotID) %>%
filter(domainID==bet_field_bout$domainID[i],siteID==bet_field_bout$siteID[i],
collectDate==bet_field_bout$collectDate[i]) -> a; a <- unique.data.frame(a[,c(1:2,5,7:10)])
bet_field_bout$beetleRichness[i] <- dim(a)[1]
}
# Making a dataframe summarizing sites
siteIDs <- c("BART", "HARV", "SCBI", "DSNY", "OSBS", "JERC", "UNDE", "ORNL", "TALL", "WOOD", "CPER", "STER", "ONAQ")
locales <- c('Bartlett Experimental Forest, NH','Harvard Forest, MA','Smithsonian Conservation Biology Institute, VA',
'Disney Wilderness Preserve, FL','Ordway-Swisher Biological Station, FL','Jones Ecological Research Center, GA',
'University of Notre Dame Environmental Research Center, MI','Oak Ridge, TN','Talladega National Forest, AL',
'Woodworth, ND','Central Plains Experimental Range, CO','North Sterling, CO','Onaqui-Ault, UT')
sites <- as.data.frame(cbind(siteIDs,locales))
# bet_field calculated at the site level
for (i in 1:dim(sites)[1]){
bet_field %>%
filter(siteID==sites$siteIDs[i])-> a
bet_div1 %>%
filter(siteID==sites$siteIDs[i])->div; div <- unique(div$taxonID)
bet_div1 %>%
filter(siteID==sites$siteIDs[i],scientificName!='')->div1; div1 <- unique(div1$scientificName)
# temporal info
sites$beginSampling[i] <- min(as.character(a$setDate),na.rm = TRUE)
sites$endSampling[i] <- max(as.character(a$collectDate),na.rm = TRUE)
sites$decimalLatitude[i] <- mean(a$decimalLatitude,na.rm = TRUE)
sites$decimalLongitude[i] <- mean(a$decimalLongitude,na.rm = TRUE)
# precip data
weather %>%
filter(siteID==sites$siteIDs[i],PRCP!='') -> w
sites$prcp[i] <- sum(w$PRCP,na.rm = TRUE) # mm of rain; divide by 25.4 to convert to inches
# trapping effort
sites$numTrapsSampled[i] <- dim(a)[1]
bet_field_plot %>%
filter(siteID==sites$siteID[i]) -> a1
sites$numPlotsSampled[i] <- dim(a1)[1]
# Organismal Data
sites$numCarabidsCaught[i] <- sum(a$beetleAbundance)
sites$beetleRichness[i] <- length(div)
sites$beetleRichnessNoMorphospecies[i] <- length(div1)
sites$numMammalsCaught[i] <- sum(a$numMammalsCaught,na.rm = TRUE)
sites$numHerpsCaught[i] <- sum(a$numHerpsCaught,na.rm = TRUE)
rm(w,a,a1,div,div1)
}
# bet_field divided by nlcdClass
types <- c("cultivatedCrops","pastureHay","grasslandHerbaceous","emergentHerbaceousWetlands","shrubScrub","deciduousForest","mixedForest","evergreenForest","woodyWetlands"); nlcd <- as.data.frame(types); rm(types)
for (i in 1:dim(nlcd)[1]){
bet_field %>%
filter(nlcdClass==nlcd$types[i]) -> a
bet_field %>%
#    select(plotID,nlcdClass) %>%
filter(nlcdClass==nlcd$types[i]) -> a1; a1 <- unique.data.frame(a1[c('plotID','nlcdClass')])
bet_div1 %>%
filter(nlcdClass==nlcd$types[i])-> div; div <- unique.data.frame(div[c('taxonID','nlcdClass')])
nlcd$numPlotsSampled[i] <- dim(a1)[1]
nlcd$numTrapsSampled[i] <- dim(a)[1]
nlcd$numMammalsCaught[i] <- sum(a$numMammalsCaught,na.rm = TRUE)
nlcd$numHerpsCaught[i] <- sum(a$numHerpsCaught,na.rm = TRUE)
nlcd$beetleAbundance[i] <- sum(a$beetleAbundance,na.rm=TRUE)
nlcd$beetleRichness[i] <- dim(div)[1]
rm(a,a1)
}
nlcd$herpsPerTrapNight <- nlcd$numHerpsCaught/(nlcd$numTrapsSampled*14) # Amount of herptile bycatch per nlcdClass per trapnight
nlcd$mamPerTrapNight <- nlcd$numMammalsCaught/(nlcd$numTrapsSampled*14)   # Amount of mammal bycatch per nlcdClass per trapnight
# Look at the list of species
for(i in sites$siteID){
bet_div1 %>%
filter(siteID==i,scientificName!='')->a
print(paste(i,'has',length(unique(a$scientificName)),'species',sep=' '))
print(sort(unique(a$scientificName)))
}
rm(a)
##########################
# Initial data exploration
##########################
# Looking at data quality
par(mfrow=c(1,2))
# Traps were set out for 14 day intervals; deviations can be seen in the histogram
hist(bet_field$daysOfTrapping,xlim=c(0,30),col="black",main="Typical sampling interval",xlab="Days of trapping",cex.axis=2.5)
# 40 traps are deployed at each interval; occasionally traps are not deployed because of environmental or logistical reasons (i.e., plot flooding, staffing limitations)
bet_field %>%
count(siteID,boutNumber) -> numTrapsDeployed
hist(numTrapsDeployed$n,xlim=c(0,40),col="black",main="Typical number of traps deployed",xlab="Number of traps per site per bout",cex.axis=2.5)
# Calculating summary stats for typical trapping interval
trapCalc <- as.data.frame(unique(bet_field[c('siteID')])) # Create a new dataframe 'trapCalc' with the list of unique siteIDs
trapCalc$trappingInterval <- -1
trapCalc$numTrapsDeployed <- -1
for (j in 1:dim(trapCalc)[1]){
bet_field %>%
filter(siteID==trapCalc$siteID[j])  -> a
trapCalc$trappingInterval[j] <- mean(na.omit(a$daysOfTrapping))
numTrapsDeployed %>%
filter(siteID==trapCalc$siteID[j]) -> a
trapCalc$numTrapsDeployed[j] <- mean(a$n)
}
# Print summary stats of sampling effort
print(trapCalc)
# Seasonal Abundance and Richness for each site
for(i in unique(bet_field_bout$siteID)){
bet_field_bout %>% filter(siteID==i) -> b; b <- b[order(b[,'collectDate']),]
sites %>% filter(siteIDs==i) %>% select(locales) -> b1
plot(b$collectDate,b$beetleAbundance,bg=21,main=i,xlab='Collection Date',ylab="Beetle Abundance across the Site",type = 'l',ylim = c(0,1000))
#points(b$collectDate,b$beetleRichness,bg=21,main=i,xlab='Collection Date',ylab="Beetle Richness across the Site",type = 'h',add=TRUE)
print(paste(i,max(b$beetleAbundance),max(b$beetleRichness)))
rm(b,b1)
}
plot(bet_field$decimalLatitude,bet_field$beetleRichness); a <- (lm(beetleRichness~decimalLatitude,data=bet_field));summary(a);abline(a)
# Weather effects on catch
plot(bet_field$prcp,bet_field$beetleAbundance,xlab='Precipitation (mm)',ylab='Beetle Abundance')
plot(bet_field_plot$prcp,bet_field_plot$beetleAbundance,xlab='Precipitation (mm)',ylab='Beetle Abundance')
# Habitat effect on catch
#boxplot(beetleAbundance~nlcdClass,data=bet_field_plot,ylim=c(0,100))
nlcd$color <- c('goldenrod',rep('darkolivegreen1',2),'darkolivegreen2','darkolivegreen3',rep('forestgreen',3),'darkgreen')
barplot(nlcd$beetleAbundance,names.arg=nlcd$types,col=nlcd$color,ylab="Beetle Abundance",xlab="NLCD Class",cex.lab=1.5,cex.axis=2.5)
barplot(nlcd$beetleRichness,names.arg=nlcd$types,col=nlcd$color,ylab="Beetle Richness",xlab="NLCD Class",cex.lab=1.5,cex.axis=2.5)
######
# MAPS
######
# Map of beetle abundance by site
plot(Dmap,col="#ADA96E",bg='#77BFC7',main='Beetle Abundance by Site',cex.main=3)
sites <- sites[order(sites[,'numCarabidsCaught']),]; sites$intensity <- heat.colors(13)[13:1]; sites$cex <- c(rep(1,4),rep(1.5,2),rep(2,4),rep(2.5,1),rep(3,1),rep(3.5,1))
points(sites$decimalLongitude,sites$decimalLatitude,bg=sites$intensity,cex=sites$cex,pch=21)
# Map of beetle Richness by site
plot(Dmap,col="#ADA96E",bg='#77BFC7',main='Beetle Richness by Site',cex.main=3)
sites <- sites[order(sites[,'beetleRichness']),]; sites$intensity <- heat.colors(13)[13:1]; sites$cex <- c(rep(1,4),rep(1.5,2),rep(2,4),rep(2.5,1),rep(3,1),rep(3.5,1))
points(sites$decimalLongitude,sites$decimalLatitude,bg=sites$intensity,cex=sites$cex,pch=21)
# Rainfall map
plot(Dmap,col="#ADA96E",bg='#77BFC7',main='Precipitation by Site',cex.main=3)
sites <- sites[order(sites[,'prcp']),]; sites$intensity <- c(rep('white',3),rep('lightblue',3),rep('turquoise',3),rep('deepskyblue',2),'blue','darkblue'); sites$cex <- c(rep(1,3),rep(1.5,3),rep(2,3),rep(2.5,2),rep(3,1),rep(3.5,1))
points(sites$decimalLongitude,sites$decimalLatitude,bg=sites$intensity,cex=sites$cex,pch=21)
# Making maps of carabid occurences
#for (i in sort(unique(bet_div1$scientificName))[2:145]){
#  car %>% filter(species==i,is.na(Lat)==FALSE)-> a
#
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
plot(Dmap,col="#ADA96E",bg='#77BFC7',main='NLCD by Site',cex.main=3)
nlcd$color <- c('goldenrod',rep('darkolivegreen1',2),'darkolivegreen2','darkolivegreen3',rep('forestgreen',3),'darkgreen')
View(nlcd)
View(sites)
i='BART'
bet_field %>%
filter(siteID==i,is.na(nlcdClass)==FALSE)-> a; a <- unique.data.frame(a[c('siteID','nlcdClass','plotID')])
a
a1 <- unique.data.frame(a[c('siteID','nlcdClass')])
a1
for(j in a1$nlcdClass){
a %>%
filter(nlcdClass==i)-> x; dim(x)[1]-> a1$number
}
a1
a
for(j in a1$nlcdClass){
a %>%
filter(nlcdClass==j)-> x
a1$number[match(j,a1$nlcdClass)] <- dim(x)[1]
}
a
a1
nlcd
for(j in a1$nlcdClass){
a %>%
filter(nlcdClass==j)-> x
a1$number[match(j,a1$nlcdClass)] <- dim(x)[1]
a1$color[match(j,a1$nlcdClass)] <- nlcd$color[match(j,nlcd$types)]
}
a1
pie(a1$number,col = a1$color,add=TRUE)
pie(a1$number,col = a1$color,add=TRUE,labels = '')
pie(a1$number,col = a1$color,labels = '')
plot(Dmap,col="#ADA96E",bg='#77BFC7',main='NLCD by Site',cex.main=3)
for(i in sites$siteIDs){
bet_field %>%
filter(siteID==i,is.na(nlcdClass)==FALSE)-> a; a <- unique.data.frame(a[c('siteID','nlcdClass','plotID')]); a1 <- unique.data.frame(a[c('siteID','nlcdClass')])
for(j in a1$nlcdClass){
a %>%
filter(nlcdClass==j)-> x
a1$number[match(j,a1$nlcdClass)] <- dim(x)[1]
a1$color[match(j,a1$nlcdClass)] <- nlcd$color[match(j,nlcd$types)]
}
pie(a1$number,col = a1$color,labels = '')
rm(a,a1)
}
for(i in sites$siteIDs){
bet_field %>%
filter(siteID==i,is.na(nlcdClass)==FALSE)-> a; a <- unique.data.frame(a[c('siteID','nlcdClass','plotID')]); a1 <- unique.data.frame(a[c('siteID','nlcdClass')])
for(j in a1$nlcdClass){
a %>%
filter(nlcdClass==j)-> x
a1$number[match(j,a1$nlcdClass)] <- dim(x)[1]
a1$color[match(j,a1$nlcdClass)] <- nlcd$color[match(j,nlcd$types)]
}
pie(a1$number,col = a1$color,labels = '',main = i)
rm(a,a1)
}
plot(bet_field$decimalLatitude,bet_field$beetleRichness); a <- (lm(beetleRichness~decimalLatitude,data=bet_field));summary(a);abline(a)
data("dune")
head(dune)
unique(bet_div1$scientificName)
sort(unique(bet_div1$scientificName))
?matrix
matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
spp <- sort(unique(bet_div1$scientificName))[2:145]
matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
View(bet_div1)
View(bet_div)
View(bet_div1)
View(bet_pin)
View(bet_div1)
spp[i,j]
i='BART'
j='Cratacanthus dubius'
spp[i,j]
spp <- sort(unique(bet_div1$scientificName))[2:145]
matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
for (i in siteIDs){
for (j in spp){
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
spp[match(i,siteIDs),match(j,colnames(spp))] <- dim(div)[1]
}
}
spp
spp <- sort(unique(bet_div1$scientificName))[2:145]
species <- matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
for (i in siteIDs){
for (j in spp){
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
spp[match(i,siteIDs),match(j,colnames(species))] <- dim(div)[1]
}
}
i
match(i, siteIDs)
match('HARV', siteIDs)
j
match(j,spp)
spp <- sort(unique(bet_div1$scientificName))[2:145]
species <- matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
for (i in siteIDs){
for (j in spp){
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
spp[match(i,siteIDs),match(j,spp)] <- dim(div)[1]
}
}
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
div
spp <- sort(unique(bet_div1$scientificName))[2:145]
species <- matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
for (i in siteIDs){
for (j in spp){
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
species[match(i,siteIDs),match(j,spp)] <- dim(div)[1]
}
}
View(species)
adonis(species~siteIDs+decimalLatitude,data=sites)
adonis(species~siteIDs+decimalLatitude,data=sites,permutations = 99)
rowSums(species)
species <- species[c(1:8,10:12)]
adonis(species~siteIDs+decimalLatitude,data=sites,permutations = 99)
adonis(species~siteIDs+decimalLatitude,data=sites,permutations = 99)
head(sites)
sites[9,]
sites["TALL",]
sites[c("TALL"),]
adonis(species~siteIDs+decimalLatitude,data=sites[c(2:6,8:13),],permutations = 99)
spp <- sort(unique(bet_div1$scientificName))[2:145]
species <- matrix(rep(0,length(spp)*length(siteIDs)),ncol = length(spp),nrow = length(siteIDs),byrow = TRUE,dimnames = list(siteIDs,spp))
for (i in siteIDs){
for (j in spp){
bet_div1 %>%
filter(siteID==i,scientificName==j) -> div
species[match(i,siteIDs),match(j,spp)] <- dim(div)[1]
}
}
species <- species[c(1:8,10:12),] # Remove TALL and ONAQ, because they have no records in the matrix 'species'
adonis(species~siteIDs+decimalLatitude,data=sites[c(2:6,8:13),],permutations = 99)
adonis(species~siteIDs+decimalLatitude,data=sites[c(2:6,8:13),],permutations = 9999)
adonis(species~decimalLatitude,data=sites[c(2:6,8:13),],permutations = 9999)
adonis(species~decimalLatitude*siteIDs,data=sites[c(2:6,8:13),],permutations = 9999)
adonis(species~decimalLatitude*prcp,data=sites[c(2:6,8:13),],permutations = 9999)
adonis(species~decimalLatitude+prcp,data=sites[c(2:6,8:13),],permutations = 9999)
data(dune)
data(dune.env)
adonis(dune ~ Management*A1, data=dune.env, permutations=99)
### Example of use with strata, for nested (e.g., block) designs.
dat <- expand.grid(rep=gl(2,1), NO3=factor(c(0,10)),field=gl(3,1) )
dat
Agropyron <- with(dat, as.numeric(field) + as.numeric(NO3)+2) +rnorm(12)/2
Schizachyrium <- with(dat, as.numeric(field) - as.numeric(NO3)+2) +rnorm(12)/2
total <- Agropyron + Schizachyrium
dotplot(total ~ NO3, dat, jitter.x=TRUE, groups=field,
type=c('p','a'), xlab="NO3", auto.key=list(columns=3, lines=TRUE) )
Y <- data.frame(Agropyron, Schizachyrium)
mod <- metaMDS(Y)
plot(mod)
plot(metaMDS(species))
plot(metaMDS(species))
metaMDS(species)
isoMDS(species)
View(metaMDS(species))
str(metaMDS(species))
spp <- metaMDS(species)
str(spp)
spp$points
spp$points[1]
spp$points[1,]
spp$points[,1]
spp$points
spp$domains <- c(rep('D01',2),'D02',rep('D03',3),'D05','D07','D09',rep('D10',2))
spp
spp$points
cbind(spp$points,spp$domains)
spp <- cbind(spp$points,spp$domains); spp[,1:2] <- as.numeric(spp[,1:2]); colnames(spp)[3] <- 'domainID'
spp
spp$MDS1
spp["MDS1"]
spp[,"MDS1"]
as.numeric(spp[,1:2])
adonis(species~decimalLatitude+prcp,data=sites[c(2:6,8:13),],permutations = 9999)
spp <- metaMDS(species); spp$domains <- c(rep('D01',2),'D02',rep('D03',3),'D05','D07','D09',rep('D10',2))
spp <- cbind(as.numeric(spp$points[,1]),as.numeric(spp$points[,2]),spp$domains); colnames(spp)[3] <- 'domainID'
spp
colnames(spp) <- c('MDS1','MDS2','domainID')
spp
adonis(species~decimalLatitude+prcp,data=sites[c(2:6,8:13),],permutations = 9999)
spp <- metaMDS(species); spp$domains <- c(rep('D01',2),'D02',rep('D03',3),'D05','D07','D09',rep('D10',2))
spp <- as.data.frame(cbind(as.numeric(spp$points[,1]),as.numeric(spp$points[,2]),spp$domains)); colnames(spp) <- c('MDS1','MDS2','domainID')
spp
plot(spp$MDS1,spp$MDS2,col=spp$domainID)
plot(spp$MDS1,spp$MDS2)
plot(spp$MDS1,spp$MDS2)
max(spp$MDS1)
is.numeric(spp$MDS1)
str(spp)
spp$MDS1 <- as.numeric(spp$MDS1)
str(spp)
spp
adonis(species~decimalLatitude+prcp,data=sites[c(2:6,8:13),],permutations = 9999)
spp <- metaMDS(species); spp$domains <- c(rep('D01',2),'D02',rep('D03',3),'D05','D07','D09',rep('D10',2))
spp <- as.data.frame(cbind(as.numeric(spp$points[,1]),as.numeric(spp$points[,2]),spp$domains)); colnames(spp) <- c('MDS1','MDS2','domainID')
str(spp$MDS1)
str(spp$MDS1,max.level = )
